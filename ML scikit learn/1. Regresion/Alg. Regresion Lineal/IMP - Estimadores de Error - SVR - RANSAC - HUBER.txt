En regresion lineal podemos utilizar otros estimadores para evaluar el MSE (error

-SVR
-RANSAC
-HUBER

En este codigo veremos como aplicando los 3 muestran la grafica y el error
De esta forma, escogemos para la data que tomamos el estimador de error mas pequeno
Es de tener cuidado que el menor estimador puede estar en notacion cientifica



import pandas as pd

# 
from sklearn.linear_model import (
   RANSACRegressor, HuberRegressor
)

# Compararemos RANSAC y Huber contra SVM
from sklearn.svm import SVR

#
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
    
import matplotlib.pyplot as plt

dataset = pd.read_csv('felicidad_corrupt.csv')
# dataset.head(5)

#axis=1 columnas axis=0 filas
x = dataset.drop(['country','score'],axis=1)
y= dataset[['score']]

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.3, random_state=42)


#Eliminar warnings
import warnings
warnings.simplefilter("ignore")

#4 ESTIMADORES EN DICCIONARIO, [LLAVE, VALORES]
estimadores = {
    #'Linear': LinearRegression(),

    'SVR': SVR(gamma= 'auto', C=1.0, epsilon=0.1),

     #sin parametro es estimacion lineal
    'RANSAC': RANSACRegressor(),   

    #epsilon menor toma menos valores atipicos
    'HUBER': HuberRegressor(epsilon=1.35)
}


for name, estimador in estimadores.items():

    estimador.fit(x_train, y_train)
    predictions = estimador.predict(x_test)

    #print predictor con error
    print("=" * 32)
    print(name," MSE :", mean_squared_error(y_test, predictions))

    #grafico
    plt.ylabel('Predicted Score')
    plt.xlabel('Real Score')
    plt.title('Predicted VS Real')
    plt.scatter(y_test, predictions)
    plt.plot(predictions, predictions,'r--')
    plt.show()