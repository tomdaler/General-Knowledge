
https://keras.io/api/callbacks/

A callback is an object that can perform actions at various stages of training
 (e.g. at the start or end of an epoch, before or after a single batch, etc).



You can use callbacks to:

- Write TensorBoard logs after every batch of training to monitor your metrics
- Periodically save your model to disk
- Do early stopping
- Get a view on internal states and statistics of a model during training

...and more




from tensorflow.keras.callbacks import Callback

OPCION 1
---------
Se va mejorando el accuracy, si despues de 1 epochs (patience=1) no mejora, se detiene
Es decir, cuando detecta deterioro se detiene

early = tf.keras.callbacks.EarlyStopping(monitor='accuracy',patience=1)

model.fit(train_images,
         train_labels,
         batch_size=64,
         callbacks=[early],
         epochs=10)




OPCION 2
--------
En el archivo mi_modelo.hdf5 guardara los mejores pesos del modelo

checkpoint = tf.keras.callbacks.ModelCheckpoint(filepath='mejor_modelo.hdf5',
                                verbose=1,
                                monitor='accuracy',
                                save_best_only=True)

hist = model.fit(datagen.flow(x_train, y_train, batch_size=128),
          callbacks=[chekcpoint],
          steps_per_epoch=x_train.shape[0] // 128, 
          epochs=20,
          verbose=2,
          shuffle=True, #??
          validation_data=(x_valid, y_valid)  # <-
         )


#tiene el mejor modelo
======================
model2 = model
model2.load_weights('./mejor_modelo.hdf5')
model2.evaluate(test_image, test_labels)
Error,   Accuracy

Resumen, tomo archivo hdf5 cuando tuve los mejores pesos
Y luego lo cargo, y verifico su error y su accuracy


OPCION 3
--------

from tensorflow.keras.callbacks import Callback

class TrainingCallback(Callback):
  def on_epoch_end(self, epoch, logs = {}):
    if logs.get("accuracy") > 0.90:
      print("Modelo llego a 95%, STOP "+str(epoch))
      self.model.stop_training = True

callback = TrainingCallback()


history=model.fit(train_images,
         train_labels,
         batch_size=64,
          callbacks = [callback],
         epochs=40)


