Customer Churn

Define
1. What are the inputs
	- User based features


2. What are the outputs
	- Prob that customer churms in the next 3 months
	- it's a value between 0 - 1
	- If > 0.5 then customer is going to churn


3. WHat do we do with the predictions
	- marketing team will send an email with a promotion to possible churn 


4. When are we making predictions
	- Once a week / month


First: Segment customers, type
- By Age
- Location
- Type of articles
- others


For all data calculate, per segment
- Average time to request an order
- Average items per order
- Average total per order


Features
- Days since last order -> average time for another order
- Orders in the last 6 months -> Minimun work orders to alert
- COMPARE WITH AVERAGES ACCORDING TO CUSTOMER SEGMENTATION
- Tenure

SEGMENTATION

Then set target in data to crate a model


VISUALIZACION
=============

Barras (2 barras)
- X : tenure
- Y : Cuantos se mantienen x tenure
      Cuantos se fueron x tenure

Barras (2 barras)
- X : monto, por grupos  10,000 20,000 30,000
- Y : Cuantos se mantienen x tenure
      Cuantos se fueron x tenure



MODEL TRAINING
- Don't shuffle data when splitting train and test
- Only train on data upto 3 months in the past

MODEL EVALUATION
- Precision
	of the one who churned, how many were predicted?
- Recall
        of the ones who would churn, how many did


Predict churn in R
https://www.youtube.com/watch?v=_2V_WwJTGpE


COMO ES BINARIO
===============
Luego de crear prediccion saque matriz de confusion

Asi sabra
- Cuantos se fueron y acerto
- Cuantos no se fueron y acerto
- Falla 1
- Falla 2




model.fit(X_train, y_train, epochs=100)
model.evaluate(X_test, y_test)

yp = model.predict(X_test)
yp[:5]


y_pred = []
for element in yp:
    if element > 0.5:
        y_pred.append(1)
    else:
        y_pred.append(0)

y_pred[:10]
y_test[:10]

from sklearn.metrics import confusion_matrix , classification_report

print(classification_report(y_test,y_pred))

import seaborn as sn
cm = tf.math.confusion_matrix(labels=y_test,predictions=y_pred)

plt.figure(figsize = (10,7))
sn.heatmap(cm, annot=True, fmt='d')
plt.xlabel('Predicted')
plt.ylabel('Truth')
