df = sns.load_dataset('diamonds')
df

df.describe(include='all')

df.groupby('cut').mean()

df.groupby('cut').median()

df.groupby('cut')['carat'].mean()

df.groupby('cut')['carat'].count()

df.groupby('cut')['carat'].max()

df.groupby('cut')['carat'].min()

df.groupby("cut")["price"].mean()
df.groupby(['cut','color'])[['price']].mean()


Altura promedio y la desviación estándar agrupando por género?
df.groupby(['genero'])['cm'].agg([np.mean,np.std])


Si el índice del DataFrame es una serie de tiempo, calcular el promedio de una variable de forma mensual:
df.groupby('M')[['col1'].mean() ?


for i in [0,1,2,3,4]:
    print(i)


for key_group, group in df.groupby('cut'):
    grouped_price = group['price'].mean()
    print('Cut: {}, Price: ${}\n'.format(key_group, grouped_price))

df.groupby(['cut','color'])['price'].mean().to_frame()

df.groupby(['cut','color'])['price'].aggregate(['min',np.mean,max])

def mean_kilo(x):
    return np.mean(x)/1000

df.groupby(['cut','color'])['price'].aggregate(['min',np.mean,max,mean_kilo])

df.groupby(['cut','color'])['price'].aggregate(['min',np.mean,max,mean_kilo]).head(10)

dict_agg = {'carat':[min, max],'price':[np.mean, mean_kilo]}
dict_agg

df.agg(['mean', 'max', 'min'])

El resultado es el mismo)
df.aggregate([np.min,np.mean.np.max])


df.groupby(['cut','color']).aggregate(dict_agg)

def f_filter(x):
    return mean_kilo(x['price']) > 4
df.groupby('cut').filter(f_filter)

df.groupby('cut').filter(f_filter)['cut'].unique()